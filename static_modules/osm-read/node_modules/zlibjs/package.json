{
  "author": {
    "name": "Yuta Imaya"
  },
  "contributors": {
    "name": "Yuta Imaya",
    "email": "imaya.devel@gmail.com"
  },
  "name": "zlibjs",
  "description": "zlib, gzip and zip implementation in JavaScript",
  "version": "0.1.7",
  "main": "./bin/node-zlib.js",
  "homepage": "https://github.com/imaya/zlib.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/imaya/zlib.js.git"
  },
  "devDependencies": {
    "buster": ">=0.6.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "buster-test"
  },
  "readme": "zlib.js\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/imaya/zlib.js.png?branch=master)](https://travis-ci.org/imaya/zlib.js)\r\n\r\n[Japanese version](./README.md)\r\n\r\nzlib.js is ZLIB(RFC1950), DEFLATE(RFC1951), GZIP(RFC1952) and PKZIP implementation in JavaScript.\r\n\r\n\r\nUsage\r\n------\r\n\r\nUse one in \"bin\" directory.\r\n\r\n- zlib_and_gzip.min.js: ZLIB + GZIP\r\n    + (Raw)\r\n        * rawdeflate.js: Raw Deflate\r\n        * rawinflate.js: Raw Inflate\r\n    + zlib.min.js: ZLIB Inflate + Deflate\r\n        * inflate.min.js: ZLIB Inflate\r\n        * deflate.min.js: ZLIB Deflate\r\n        * inflate_stream.min.js: ZLIB Inflate (stream mode)\r\n    + (GZIP)\r\n        * gzip.min.js: GZIP\r\n        * gunzip.min.js: GUNZIP\r\n    + (PKZIP)\r\n        * zip.min.js ZIP\r\n        * unzip.min.js UNZIP\r\n- node-zlib.js: (ZLIB + GZIP for node.js)\r\n\r\n\r\n### Compression\r\n\r\n#### Raw Deflate\r\n\r\n```js\r\n// plain = Array.<number> or Uint8Array\r\nvar deflate = new Zlib.RawDeflate(plain);\r\nvar compressed = deflate.compress();\r\n```\r\n\r\n#### Raw Deflate Option\r\n\r\nSee ZLIB Option.\r\n\r\n#### ZLIB\r\n\r\n```js\r\n// plain = Array.<number> or Uint8Array\r\nvar deflate = new Zlib.Deflate(plain);\r\nvar compressed = deflate.compress();\r\n```\r\n\r\n##### ZLIB Option\r\n\r\nSecond argument of Zlib.Deflate constructor\r\n\r\n```js\r\n{\r\n    compressionType: Zlib.Deflate.CompressionType, // compression type\r\n    lazy: number // lazy matching parameter\r\n}\r\n```\r\n\r\n<code>Zlib.Deflate.CompressionType</code> is enumerable,\r\nChoose one in <code>NONE</code> (Store), <code>FIXED</code> (Fixed Huffman Coding), <code>DYNAMIC</code> (Dynamic Huffman Coding).\r\nDefault value is <code>DYNAMIC</code>.\r\n\r\n<code>lazy</code> is Lazy Matching length.\r\nThis parameter is deprecated.\r\n\r\n\r\n#### GZIP\r\n\r\nGZIP implementation is incomplete.\r\nHowever, there is no problem in usual use. \r\n\r\n```js\r\n// plain = Array.<number> or Uint8Array\r\nvar gzip = new Zlib.Gzip(plain);\r\nvar compressed = gzip.compress();\r\n```\r\n\r\n\r\n##### GZIP Option\r\n\r\n```js\r\n{\r\n    deflateOptions: Object, // see: deflate option (ZLIB Option)\r\n    flags: {\r\n        fname: boolean, // use filename?\r\n        comment: boolean, // use comment?\r\n        fhcrc: boolean // use file checksum?\r\n    },\r\n    filename: string, // filename\r\n    comment: string // comment\r\n}\r\n```\r\n\r\n\r\n#### PKZIP\r\n\r\n```js\r\nvar zip = new Zlib.Zip();\r\n// plainData1\r\nzip.addFile(plainData1, {\r\n    filename: stringToByteArray('foo.txt')\r\n});\r\nzip.addFile(plainData2, {\r\n    filename: stringToByteArray('bar.txt')\r\n});\r\nzip.addFile(plainData3, {\r\n    filename: stringToByteArray('baz.txt')\r\n});\r\nvar compressed = zip.compress();\r\n\r\nfunction stringToByteArray(str) {\r\n    var array = new (window.Uint8Array !== void 0 ? Uint8Array : Array)(str.length);\r\n    var i;\r\n    var il;\r\n\r\n    for (i = 0, il = str.length; i < il; ++i) {\r\n        array[i] = str.charCodeAt(i) & 0xff;\r\n    }\r\n\r\n    return array;\r\n}\r\n```\r\n\r\n##### PKZIP Option\r\n\r\nfilename, comment, extraField are must use Uint8Array if enabled Typed Array.\r\n\r\n```js\r\n{\r\n    filename: (Array.<number>|Uint8Array), // filename\r\n    comment: (Array.<number>|Uint8Array), //comment\r\n    extraField: (Array.<number>|Uint8Array), // extra field\r\n    compress: boolean, // compress when called \"addFile\" method.\r\n    compressionMethod: Zlib.Zip.CompressionMethod, // STORE or DEFLATE\r\n    os: Zlib.Zip.OperatingSystem, // MSDOS or UNIX or MACINTOSH\r\n    deflateOption: Object // see: ZLIB Option\r\n}\r\n```\r\n\r\n### Decompression\r\n\r\n#### Raw Deflate\r\n\r\n```js\r\n// compressed = Array.<number> or Uint8Array\r\nvar inflate = new Zlib.RawInflate(compressed);\r\nvar plain = inflate.decompress();\r\n```\r\n\r\n#### Raw Deflate Option\r\n\r\nSee ZLIB Option.\r\n\r\n#### ZLIB\r\n\r\n```js\r\n// compressed = Array.<number> or Uint8Array\r\nvar inflate = new Zlib.Inflate(compressed);\r\nvar plain = inflate.decompress();\r\n```\r\n\r\n##### ZLIB Option\r\n\r\nSecond argument of Zlib.Inflate constructor\r\n\r\n```js\r\n{\r\n    'index': number, // start position in input buffer \r\n    'bufferSize': number, // initial output buffer size\r\n    'bufferType': Zlib.Inflate.BufferType, // buffer expantion type\r\n    'resize': boolean, // resize buffer(ArrayBuffer) when end of decompression (default: false)\r\n    'verify': boolean  // verify decompression result (default: false)\r\n}\r\n```\r\n\r\n<code>Zlib.Inflate.BufferType</code> is enumerable.\r\nChoose one <code>ADAPTIVE</code>(default) and <code>BLOCK</code>.\r\n\r\n- <code>ADAPTIVE</code>: buffer expansion based on compression ratio in filled buffer.\r\n- <code>BLOCK</code>: buffer expansion based on <code>BufferSize</code>.\r\n\r\n\r\n#### GZIP\r\n\r\n```js\r\n// compressed = Array.<number> or Uint8Array\r\nvar gunzip = new Zlib.Gunzip(compressed);\r\nvar plain = gunzip.decompress();\r\n```\r\n\r\n\r\n#### PKZIP\r\n\r\n\r\n```js\r\n// compressed = Array.<number> or Uint8Array\r\nvar unzip = new Zlib.Unzip(compressed);\r\nvar filenames = unzip.getFilenames();\r\nvar plain = unzip.decompress(filenames[0]);\r\n```\r\n\r\n\r\n### Node.js\r\n\r\nsee unit tests.\r\n<https://github.com/imaya/zlib.js/blob/master/test/node-test.js>\r\n\r\n\r\n## Debug\r\n\r\nIf you want to know the code before compile, SourceMaps and PrettyPrint can be used.\r\n\r\n\r\n### SourceMaps\r\n\r\nIf you want to enable the SourceMaps if, you can use the `src` directory and *.min.js.map.\r\n\r\n    - inflate.min.js\r\n    - inflate.min.js.map\r\n    - [src]\r\n      - (source files)\r\n\r\n`[src]` is zlib.js source code directory.\r\n\r\n\r\n### Pretty Print\r\n\r\n`zlib.pretty.js` is not renamed symbol.\r\n\r\n\r\nHow to build\r\n------------\r\n\r\nBuild using Ant and Closure Compiler.\r\n\r\n### Requirement\r\n\r\n- Ant 1.8+\r\n- JRE 1.6+\r\n- Python\r\n\r\n### Build\r\n\r\nUse \"ant\" command.\r\n\r\n```\r\n$ ant [target]\r\n```\r\n\r\n#### Build target\r\n\r\ntarget         | generate file        | implementation\r\n---------------|----------------------|-------------\r\ndeps           | deps.js              | (dependency: deps.js)\r\ndeflate        | deflate.min.js       | ZLIB Deflate\r\ninflate        | inflate.min.js       | ZLIB Inflate\r\ninflate_stream | inlate_stream.min.js | ZLIB Inlate (stream)\r\nzlib           | zlib.min.js          | ZLIB Deflate + Inflate\r\ngzip           | gzip.min.js          | GZIP Compression\r\ngunzip         | gunzip.min.js        | GZIP Decompression\r\nzlib_and_gzip  | zlib_and_gzip.min.js | ZLIB + GZIP\r\nnode           | node-zlib.js         | ZLIB + GZIP for node.js\r\nzip            | zip.min.js           | PKZIP Compression\r\nunzip          | unzip.min.js         | PKZIP Decompression\r\nall            | *                    | default target\r\n\r\n\r\nIssue\r\n-----\r\n\r\nPreset dictionary is not implemented.\r\n\r\n\r\nLicense\r\n--------\r\n\r\nCopyright &copy; 2012 imaya.\r\nLicensed under the MIT License.\r\n",
  "readmeFilename": "README.en.md",
  "bugs": {
    "url": "https://github.com/imaya/zlib.js/issues"
  },
  "dependencies": {},
  "_id": "zlibjs@0.1.7",
  "_from": "zlibjs@0.1.7"
}
