(function () {
    'use strict';
    function h(a) {
        throw a;
    }
    var j = void 0, aa = this;
    function l(a, c) {
        var d = a.split('.'), b = aa;
        !(d[0] in b) && b.execScript && b.execScript('var ' + d[0]);
        for (var f; d.length && (f = d.shift());)
            !d.length && c !== j ? b[f] = c : b = b[f] ? b[f] : b[f] = {};
    }
    ;
    var m = 'undefined' !== typeof Uint8Array && 'undefined' !== typeof Uint16Array && 'undefined' !== typeof Uint32Array;
    new (m ? Uint8Array : Array)(256);
    var n;
    for (n = 0; 256 > n; ++n)
        for (var r = n, ba = 7, r = r >>> 1; r; r >>>= 1)
            --ba;
    var ca = [
            0,
            1996959894,
            3993919788,
            2567524794,
            124634137,
            1886057615,
            3915621685,
            2657392035,
            249268274,
            2044508324,
            3772115230,
            2547177864,
            162941995,
            2125561021,
            3887607047,
            2428444049,
            498536548,
            1789927666,
            4089016648,
            2227061214,
            450548861,
            1843258603,
            4107580753,
            2211677639,
            325883990,
            1684777152,
            4251122042,
            2321926636,
            335633487,
            1661365465,
            4195302755,
            2366115317,
            997073096,
            1281953886,
            3579855332,
            2724688242,
            1006888145,
            1258607687,
            3524101629,
            2768942443,
            901097722,
            1119000684,
            3686517206,
            2898065728,
            853044451,
            1172266101,
            3705015759,
            2882616665,
            651767980,
            1373503546,
            3369554304,
            3218104598,
            565507253,
            1454621731,
            3485111705,
            3099436303,
            671266974,
            1594198024,
            3322730930,
            2970347812,
            795835527,
            1483230225,
            3244367275,
            3060149565,
            1994146192,
            31158534,
            2563907772,
            4023717930,
            1907459465,
            112637215,
            2680153253,
            3904427059,
            2013776290,
            251722036,
            2517215374,
            3775830040,
            2137656763,
            141376813,
            2439277719,
            3865271297,
            1802195444,
            476864866,
            2238001368,
            4066508878,
            1812370925,
            453092731,
            2181625025,
            4111451223,
            1706088902,
            314042704,
            2344532202,
            4240017532,
            1658658271,
            366619977,
            2362670323,
            4224994405,
            1303535960,
            984961486,
            2747007092,
            3569037538,
            1256170817,
            1037604311,
            2765210733,
            3554079995,
            1131014506,
            879679996,
            2909243462,
            3663771856,
            1141124467,
            855842277,
            2852801631,
            3708648649,
            1342533948,
            654459306,
            3188396048,
            3373015174,
            1466479909,
            544179635,
            3110523913,
            3462522015,
            1591671054,
            702138776,
            2966460450,
            3352799412,
            1504918807,
            783551873,
            3082640443,
            3233442989,
            3988292384,
            2596254646,
            62317068,
            1957810842,
            3939845945,
            2647816111,
            81470997,
            1943803523,
            3814918930,
            2489596804,
            225274430,
            2053790376,
            3826175755,
            2466906013,
            167816743,
            2097651377,
            4027552580,
            2265490386,
            503444072,
            1762050814,
            4150417245,
            2154129355,
            426522225,
            1852507879,
            4275313526,
            2312317920,
            282753626,
            1742555852,
            4189708143,
            2394877945,
            397917763,
            1622183637,
            3604390888,
            2714866558,
            953729732,
            1340076626,
            3518719985,
            2797360999,
            1068828381,
            1219638859,
            3624741850,
            2936675148,
            906185462,
            1090812512,
            3747672003,
            2825379669,
            829329135,
            1181335161,
            3412177804,
            3160834842,
            628085408,
            1382605366,
            3423369109,
            3138078467,
            570562233,
            1426400815,
            3317316542,
            2998733608,
            733239954,
            1555261956,
            3268935591,
            3050360625,
            752459403,
            1541320221,
            2607071920,
            3965973030,
            1969922972,
            40735498,
            2617837225,
            3943577151,
            1913087877,
            83908371,
            2512341634,
            3803740692,
            2075208622,
            213261112,
            2463272603,
            3855990285,
            2094854071,
            198958881,
            2262029012,
            4057260610,
            1759359992,
            534414190,
            2176718541,
            4139329115,
            1873836001,
            414664567,
            2282248934,
            4279200368,
            1711684554,
            285281116,
            2405801727,
            4167216745,
            1634467795,
            376229701,
            2685067896,
            3608007406,
            1308918612,
            956543938,
            2808555105,
            3495958263,
            1231636301,
            1047427035,
            2932959818,
            3654703836,
            1088359270,
            936918000,
            2847714899,
            3736837829,
            1202900863,
            817233897,
            3183342108,
            3401237130,
            1404277552,
            615818150,
            3134207493,
            3453421203,
            1423857449,
            601450431,
            3009837614,
            3294710456,
            1567103746,
            711928724,
            3020668471,
            3272380065,
            1510334235,
            755167117
        ];
    m && new Uint32Array(ca);
    function s(a) {
        var c = a.length, d = 0, b = Number.POSITIVE_INFINITY, f, e, g, i, p, A, B, k, q;
        for (k = 0; k < c; ++k)
            a[k] > d && (d = a[k]), a[k] < b && (b = a[k]);
        f = 1 << d;
        e = new (m ? Uint32Array : Array)(f);
        g = 1;
        i = 0;
        for (p = 2; g <= d;) {
            for (k = 0; k < c; ++k)
                if (a[k] === g) {
                    A = 0;
                    B = i;
                    for (q = 0; q < g; ++q)
                        A = A << 1 | B & 1, B >>= 1;
                    for (q = A; q < f; q += p)
                        e[q] = g << 16 | k;
                    ++i;
                }
            ++g;
            i <<= 1;
            p <<= 1;
        }
        return [
            e,
            d,
            b
        ];
    }
    ;
    var t = [], u;
    for (u = 0; 288 > u; u++)
        switch (!0) {
        case 143 >= u:
            t.push([
                u + 48,
                8
            ]);
            break;
        case 255 >= u:
            t.push([
                u - 144 + 400,
                9
            ]);
            break;
        case 279 >= u:
            t.push([
                u - 256 + 0,
                7
            ]);
            break;
        case 287 >= u:
            t.push([
                u - 280 + 192,
                8
            ]);
            break;
        default:
            h('invalid literal: ' + u);
        }
    function da() {
        var a = v;
        switch (!0) {
        case 3 === a:
            return [
                257,
                a - 3,
                0
            ];
        case 4 === a:
            return [
                258,
                a - 4,
                0
            ];
        case 5 === a:
            return [
                259,
                a - 5,
                0
            ];
        case 6 === a:
            return [
                260,
                a - 6,
                0
            ];
        case 7 === a:
            return [
                261,
                a - 7,
                0
            ];
        case 8 === a:
            return [
                262,
                a - 8,
                0
            ];
        case 9 === a:
            return [
                263,
                a - 9,
                0
            ];
        case 10 === a:
            return [
                264,
                a - 10,
                0
            ];
        case 12 >= a:
            return [
                265,
                a - 11,
                1
            ];
        case 14 >= a:
            return [
                266,
                a - 13,
                1
            ];
        case 16 >= a:
            return [
                267,
                a - 15,
                1
            ];
        case 18 >= a:
            return [
                268,
                a - 17,
                1
            ];
        case 22 >= a:
            return [
                269,
                a - 19,
                2
            ];
        case 26 >= a:
            return [
                270,
                a - 23,
                2
            ];
        case 30 >= a:
            return [
                271,
                a - 27,
                2
            ];
        case 34 >= a:
            return [
                272,
                a - 31,
                2
            ];
        case 42 >= a:
            return [
                273,
                a - 35,
                3
            ];
        case 50 >= a:
            return [
                274,
                a - 43,
                3
            ];
        case 58 >= a:
            return [
                275,
                a - 51,
                3
            ];
        case 66 >= a:
            return [
                276,
                a - 59,
                3
            ];
        case 82 >= a:
            return [
                277,
                a - 67,
                4
            ];
        case 98 >= a:
            return [
                278,
                a - 83,
                4
            ];
        case 114 >= a:
            return [
                279,
                a - 99,
                4
            ];
        case 130 >= a:
            return [
                280,
                a - 115,
                4
            ];
        case 162 >= a:
            return [
                281,
                a - 131,
                5
            ];
        case 194 >= a:
            return [
                282,
                a - 163,
                5
            ];
        case 226 >= a:
            return [
                283,
                a - 195,
                5
            ];
        case 257 >= a:
            return [
                284,
                a - 227,
                5
            ];
        case 258 === a:
            return [
                285,
                a - 258,
                0
            ];
        default:
            h('invalid length: ' + a);
        }
    }
    var w = [], v, x;
    for (v = 3; 258 >= v; v++)
        x = da(), w[v] = x[2] << 24 | x[1] << 16 | x[0];
    m && new Uint32Array(w);
    function y(a, c) {
        this.blocks = [];
        this.bufferSize = 32768;
        this.bitsbuflen = this.bitsbuf = this.ip = this.totalpos = 0;
        this.input = m ? new Uint8Array(a) : a;
        this.bfinal = !1;
        this.bufferType = z;
        this.resize = !1;
        if (c || !(c = {}))
            c.index && (this.ip = c.index), c.bufferSize && (this.bufferSize = c.bufferSize), c.bufferType && (this.bufferType = c.bufferType), c.resize && (this.resize = c.resize);
        switch (this.bufferType) {
        case C:
            this.op = 32768;
            this.output = new (m ? Uint8Array : Array)(32768 + this.bufferSize + 258);
            break;
        case z:
            this.op = 0;
            this.output = new (m ? Uint8Array : Array)(this.bufferSize);
            this.expandBuffer = this.expandBufferAdaptive;
            this.concatBuffer = this.concatBufferDynamic;
            this.decodeHuffman = this.decodeHuffmanAdaptive;
            break;
        default:
            h(Error('invalid inflate mode'));
        }
    }
    var C = 0, z = 1, D = {
            BLOCK: C,
            ADAPTIVE: z
        };
    y.prototype.decompress = function () {
        for (; !this.bfinal;) {
            var a = E(this, 3);
            a & 1 && (this.bfinal = !0);
            a >>>= 1;
            switch (a) {
            case 0:
                var a = this.input, c = this.ip, d = this.output, b = this.op, f = j, e = j, g = j, i = d.length, f = j;
                this.bitsbuflen = this.bitsbuf = 0;
                f = a[c++];
                f === j && h(Error('invalid uncompressed block header: LEN (first byte)'));
                e = f;
                f = a[c++];
                f === j && h(Error('invalid uncompressed block header: LEN (second byte)'));
                e |= f << 8;
                f = a[c++];
                f === j && h(Error('invalid uncompressed block header: NLEN (first byte)'));
                g = f;
                f = a[c++];
                f === j && h(Error('invalid uncompressed block header: NLEN (second byte)'));
                g |= f << 8;
                e === ~g && h(Error('invalid uncompressed block header: length verify'));
                c + e > a.length && h(Error('input buffer is broken'));
                switch (this.bufferType) {
                case C:
                    for (; b + e > d.length;) {
                        f = i - b;
                        e -= f;
                        if (m)
                            d.set(a.subarray(c, c + f), b), b += f, c += f;
                        else
                            for (; f--;)
                                d[b++] = a[c++];
                        this.op = b;
                        d = this.expandBuffer();
                        b = this.op;
                    }
                    break;
                case z:
                    for (; b + e > d.length;)
                        d = this.expandBuffer({fixRatio: 2});
                    break;
                default:
                    h(Error('invalid inflate mode'));
                }
                if (m)
                    d.set(a.subarray(c, c + e), b), b += e, c += e;
                else
                    for (; e--;)
                        d[b++] = a[c++];
                this.ip = c;
                this.op = b;
                this.output = d;
                break;
            case 1:
                this.decodeHuffman(ea, fa);
                break;
            case 2:
                ga(this);
                break;
            default:
                h(Error('unknown BTYPE: ' + a));
            }
        }
        return this.concatBuffer();
    };
    var F = [
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
        ], G = m ? new Uint16Array(F) : F, H = [
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258,
            258,
            258
        ], I = m ? new Uint16Array(H) : H, J = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            0,
            0,
            0
        ], K = m ? new Uint8Array(J) : J, L = [
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577
        ], M = m ? new Uint16Array(L) : L, N = [
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
        ], O = m ? new Uint8Array(N) : N, P = new (m ? Uint8Array : Array)(288), Q, R;
    Q = 0;
    for (R = P.length; Q < R; ++Q)
        P[Q] = 143 >= Q ? 8 : 255 >= Q ? 9 : 279 >= Q ? 7 : 8;
    var ea = s(P), S = new (m ? Uint8Array : Array)(30), T, U;
    T = 0;
    for (U = S.length; T < U; ++T)
        S[T] = 5;
    var fa = s(S);
    function E(a, c) {
        for (var d = a.bitsbuf, b = a.bitsbuflen, f = a.input, e = a.ip, g; b < c;)
            g = f[e++], g === j && h(Error('input buffer is broken')), d |= g << b, b += 8;
        g = d & (1 << c) - 1;
        a.bitsbuf = d >>> c;
        a.bitsbuflen = b - c;
        a.ip = e;
        return g;
    }
    function V(a, c) {
        for (var d = a.bitsbuf, b = a.bitsbuflen, f = a.input, e = a.ip, g = c[0], i = c[1], p; b < i;)
            p = f[e++], p === j && h(Error('input buffer is broken')), d |= p << b, b += 8;
        f = g[d & (1 << i) - 1];
        g = f >>> 16;
        a.bitsbuf = d >> g;
        a.bitsbuflen = b - g;
        a.ip = e;
        return f & 65535;
    }
    function ga(a) {
        function c(a, b, d) {
            var c, f, e;
            for (e = 0; e < a;)
                switch (c = V(this, b), c) {
                case 16:
                    for (c = 3 + E(this, 2); c--;)
                        d[e++] = f;
                    break;
                case 17:
                    for (c = 3 + E(this, 3); c--;)
                        d[e++] = 0;
                    f = 0;
                    break;
                case 18:
                    for (c = 11 + E(this, 7); c--;)
                        d[e++] = 0;
                    f = 0;
                    break;
                default:
                    f = d[e++] = c;
                }
            return d;
        }
        var d = E(a, 5) + 257, b = E(a, 5) + 1, f = E(a, 4) + 4, e = new (m ? Uint8Array : Array)(G.length), g;
        for (g = 0; g < f; ++g)
            e[G[g]] = E(a, 3);
        f = s(e);
        e = new (m ? Uint8Array : Array)(d);
        g = new (m ? Uint8Array : Array)(b);
        a.decodeHuffman(s(c.call(a, d, f, e)), s(c.call(a, b, f, g)));
    }
    y.prototype.decodeHuffman = function (a, c) {
        var d = this.output, b = this.op;
        this.currentLitlenTable = a;
        for (var f = d.length - 258, e, g, i; 256 !== (e = V(this, a));)
            if (256 > e)
                b >= f && (this.op = b, d = this.expandBuffer(), b = this.op), d[b++] = e;
            else {
                e -= 257;
                i = I[e];
                0 < K[e] && (i += E(this, K[e]));
                e = V(this, c);
                g = M[e];
                0 < O[e] && (g += E(this, O[e]));
                b >= f && (this.op = b, d = this.expandBuffer(), b = this.op);
                for (; i--;)
                    d[b] = d[b++ - g];
            }
        for (; 8 <= this.bitsbuflen;)
            this.bitsbuflen -= 8, this.ip--;
        this.op = b;
    };
    y.prototype.decodeHuffmanAdaptive = function (a, c) {
        var d = this.output, b = this.op;
        this.currentLitlenTable = a;
        for (var f = d.length, e, g, i; 256 !== (e = V(this, a));)
            if (256 > e)
                b >= f && (d = this.expandBuffer(), f = d.length), d[b++] = e;
            else {
                e -= 257;
                i = I[e];
                0 < K[e] && (i += E(this, K[e]));
                e = V(this, c);
                g = M[e];
                0 < O[e] && (g += E(this, O[e]));
                b + i > f && (d = this.expandBuffer(), f = d.length);
                for (; i--;)
                    d[b] = d[b++ - g];
            }
        for (; 8 <= this.bitsbuflen;)
            this.bitsbuflen -= 8, this.ip--;
        this.op = b;
    };
    y.prototype.expandBuffer = function () {
        var a = new (m ? Uint8Array : Array)(this.op - 32768), c = this.op - 32768, d, b, f = this.output;
        if (m)
            a.set(f.subarray(32768, a.length));
        else {
            d = 0;
            for (b = a.length; d < b; ++d)
                a[d] = f[d + 32768];
        }
        this.blocks.push(a);
        this.totalpos += a.length;
        if (m)
            f.set(f.subarray(c, c + 32768));
        else
            for (d = 0; 32768 > d; ++d)
                f[d] = f[c + d];
        this.op = 32768;
        return f;
    };
    y.prototype.expandBufferAdaptive = function (a) {
        var c = this.input.length / this.ip + 1 | 0, d = this.input, b = this.output;
        a && ('number' === typeof a.fixRatio && (c = a.fixRatio), 'number' === typeof a.addRatio && (c += a.addRatio));
        2 > c ? (a = (d.length - this.ip) / this.currentLitlenTable[2], a = 258 * (a / 2) | 0, a = a < b.length ? b.length + a : b.length << 1) : a = b.length * c;
        m ? (a = new Uint8Array(a), a.set(b)) : a = b;
        return this.output = a;
    };
    y.prototype.concatBuffer = function () {
        var a = 0, c = this.output, d = this.blocks, b, f = new (m ? Uint8Array : Array)(this.totalpos + (this.op - 32768)), e, g, i, p;
        if (0 === d.length)
            return m ? this.output.subarray(32768, this.op) : this.output.slice(32768, this.op);
        e = 0;
        for (g = d.length; e < g; ++e) {
            b = d[e];
            i = 0;
            for (p = b.length; i < p; ++i)
                f[a++] = b[i];
        }
        e = 32768;
        for (g = this.op; e < g; ++e)
            f[a++] = c[e];
        this.blocks = [];
        return this.buffer = f;
    };
    y.prototype.concatBufferDynamic = function () {
        var a, c = this.op;
        m ? this.resize ? (a = new Uint8Array(c), a.set(this.output.subarray(0, c))) : a = this.output.subarray(0, c) : (this.output.length > c && (this.output.length = c), a = this.output);
        return this.buffer = a;
    };
    function W(a, c) {
        var d, b;
        this.input = a;
        this.ip = 0;
        if (c || !(c = {}))
            c.index && (this.ip = c.index), c.verify && (this.verify = c.verify);
        d = a[this.ip++];
        b = a[this.ip++];
        switch (d & 15) {
        case ha:
            this.method = ha;
            break;
        default:
            h(Error('unsupported compression method'));
        }
        0 !== ((d << 8) + b) % 31 && h(Error('invalid fcheck flag:' + ((d << 8) + b) % 31));
        b & 32 && h(Error('fdict flag is not supported'));
        this.rawinflate = new y(a, {
            index: this.ip,
            bufferSize: c.bufferSize,
            bufferType: c.bufferType,
            resize: c.resize
        });
    }
    W.prototype.decompress = function () {
        var a = this.input, c;
        c = this.rawinflate.decompress();
        this.ip = this.rawinflate.ip;
        if (this.verify) {
            var a = a[this.ip++] << 24 | a[this.ip++] << 16 | a[this.ip++] << 8 | a[this.ip++], d = c;
            if ('string' === typeof d) {
                var d = d.split(''), b, f;
                b = 0;
                for (f = d.length; b < f; b++)
                    d[b] = (d[b].charCodeAt(0) & 255) >>> 0;
            }
            b = 1;
            f = 0;
            for (var e = d.length, g, i = 0; 0 < e;) {
                g = 1024 < e ? 1024 : e;
                e -= g;
                do
                    b += d[i++], f += b;
                while (--g);
                b %= 65521;
                f %= 65521;
            }
            a !== (f << 16 | b) >>> 0 && h(Error('invalid adler-32 checksum'));
        }
        return c;
    };
    l('Zlib.Inflate', W);
    l('Zlib.Inflate.BufferType', D);
    D.ADAPTIVE = D.ADAPTIVE;
    D.BLOCK = D.BLOCK;
    l('Zlib.Inflate.prototype.decompress', W.prototype.decompress);
    var ia = [
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
        ];
    m && new Uint16Array(ia);
    var ja = [
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258,
            258,
            258
        ];
    m && new Uint16Array(ja);
    var ka = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            0,
            0,
            0
        ];
    m && new Uint8Array(ka);
    var la = [
            1,
            2,
            3,
            4,
            5,
            7,
            9,
            13,
            17,
            25,
            33,
            49,
            65,
            97,
            129,
            193,
            257,
            385,
            513,
            769,
            1025,
            1537,
            2049,
            3073,
            4097,
            6145,
            8193,
            12289,
            16385,
            24577
        ];
    m && new Uint16Array(la);
    var ma = [
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
        ];
    m && new Uint8Array(ma);
    var X = new (m ? Uint8Array : Array)(288), Y, na;
    Y = 0;
    for (na = X.length; Y < na; ++Y)
        X[Y] = 143 >= Y ? 8 : 255 >= Y ? 9 : 279 >= Y ? 7 : 8;
    s(X);
    var Z = new (m ? Uint8Array : Array)(30), $, oa;
    $ = 0;
    for (oa = Z.length; $ < oa; ++$)
        Z[$] = 5;
    s(Z);
    var ha = 8;
}.call(this));
